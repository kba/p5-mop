=pod

=head1 NAME

Perl 5 MOP - Syntax & Semantics - Attributes

=head1 DESCRIPTION

This document introduces the proposed attribute syntax for the
new object system for Perl.

=head1 SYNTAX

=head2 Attribute definition

Attributes will be defined using the new C<has> keyword.

As with the C<class> and C<method> keywords, the C<has>
keyword is simply sugar for the underlying calls to the
MOP. So for instance, the following code:

  has $bar = 10;

Is (roughly) equivalent to the following raw MOP code:

  Attribute->new(
      name          => '$bar',
      initial_value => sub { 10 }
  );

The interesting part here is that the initial value
has been wrapped in a CODE ref. The details of this
are explained below.

=head2 The right-hand side of C<=>

The value on the right-hand side of the C<=> sign in a
C<has> statement does not behave in the normal assignment
way. Instead the value is stored as the initial value to
be stored in any instance slot which corresponds to the
attribute.

For those familiar with lazy languages like Haskell, the
value is basically like a thunk (see below for reference).

=head3 String and Number literals

Literal non-reference values are perfectly legal on the rhs of
C<=>, meaning the following bits of code are fine:

  has $foo = "a string";
  has $bar = 10;

The value will be copied (as is the default behavior of Perl)
when the instance is constructed. This is how it works in the
prototype and how it should work in the final.

=head3 Everything else

If you want an object, an ARRAY ref, HASH ref or some other
value not described above, then the value is wrapped in a
thunk, so that this:

  has $bar = Some::Object->new;

Which will essentially get transformed into this:

  has $bar = sub { Some::Object->new };

The CODE ref is then called when an instance is constructed
and the return value placed into the instance slot. For the
most part, this technique works and allows you to do all
sorts of tricky stuff when initializing.

=head1 QUESTIONS

=head1 SEE ALSO

=over 4

=item Thunk (functional programming)

L<http://en.wikipedia.org/wiki/Thunk_(functional_programming)>

=back

=head1 AUTHOR

Stevan Little E<lt>stevan.little@iinteractive.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright 2011 Infinity Interactive, Inc.

L<http://www.iinteractive.com>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut